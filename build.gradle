
buildscript {
	dependencies {
		classpath("org.openapitools:openapi-generator-gradle-plugin:7.5.0")
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.openapi.generator" version "7.1.0"
	id 'com.diffplug.spotless' version '6.25.0' apply false
}

version = '0.0.1-SNAPSHOT'
apply plugin: 'com.diffplug.spotless'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// OPENAPI
	implementation('io.swagger:swagger-annotations:1.6.8')
	implementation('org.openapitools:jackson-databind-nullable:0.2.3')
	implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2')

	//validator email
	implementation 'commons-validator:commons-validator:1.7'

}

tasks.named('test') {
	useJUnitPlatform()
}

openApiGenerate {
	generatorName = "spring"
	templateDir = "$rootDir/openapi/templates/spring-boot".toString()
	inputSpec = "$rootDir/openapi/main.yaml".toString()
	outputDir = layout.buildDirectory.file("generated/sources/openapi").get().asFile.path
	apiPackage = "org.knj.th.api"
	modelPackage = "org.knj.th.dto"
	configOptions = [
			dateLibrary         : "java8-localdatetime",
			library             : "spring-boot",
			interfaceOnly       : "true",
			useTags             : "true",
			skipDefaultInterface: "true",
			useSpringBoot3      : "true"
	]
	typeMappings = [
			time: "java.time.LocalTime",
	]
}

compileJava.dependsOn(tasks.openApiGenerate)

sourceSets.main.java.srcDir layout.buildDirectory.file("generated/sources/openapi/src/main/java").get().asFile.path

spotless {
	java {
		googleJavaFormat('1.22.0')
				.reflowLongStrings()
				.formatJavadoc(true)
				.reorderImports(true)
				.groupArtifact('com.google.googlejavaformat:google-java-format')
	}
	groovyGradle {
		target '*.gradle'
		greclipse()
	}
	format 'xml', {
		target 'src/**/*.xml'
		eclipseWtp('xml')
	}
	yaml {
		target 'src/*/resources/**/*.yaml','src/*/resources/**/*.yml'
		jackson()
				.feature('ORDER_MAP_ENTRIES_BY_KEYS', true)
	}
	gherkin {
		target 'src/test/resources/**/*.feature'
		gherkinUtils()
				.version ('9.0.0')
	}
}